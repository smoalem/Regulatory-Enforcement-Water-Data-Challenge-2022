mad_libs("dog","fish","wolf")
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
mad_libs("dog","fish","wolf")
View(mad_libs)
View(mad_libs)
mad_libs("dog","fish","wolf")
mad_libs("Newark", "dumbass", "Tesla")
source("~/swirl_inst.R")
mad_libs("Newark", "dumbass", "Tesla")
getpwd
getpwd()
getwd()
nxt()
play(())
play()
mad_libs()
mad_libs("Newark", "dumbass", "Tesla")
View(mad_libs)
View(mad_libs)
View(mad_libs)
mad_libs("Newark", "dumbass", "Tesla")
mad_libs("Newark", "dumbass", "Tesla")
mad_libs("Newark", "dumbass", "Tesla")
mad_libs
mad_libs("Newark", "dumbass", "Tesla")
mad_libs("Newark", "dumbass", "Tesla")
View(mad_libs)
View(mad_libs)
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
View(my_data)
View(mad_libs)
View(mad_libs)
View(mad_libs)
View(mad_libs)
edit(mad_libs)
View(mad_libs)
View(mad_libs)
View(my_mean)
View(mad_libs)
View(mad_libs)
View(mad_libs)
View(my_mean)
View(mad_libs)
gc()
library("swirl")
swirl()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,19))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("woo", "woo")
submit()
mad_libs("dog", "fish", "wolf")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, mean)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(unique(flags))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
plants$Active_Growth_Period
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, replace=FALSE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(flips)
rbinom(1, size=100, prob=0.7)
flips <- rbinom(1, size=100, prob=0.7)
flips <- rbinom(100, size=100, prob=0.7)
flips <- rbinom(100, size=1, prob=0.7)
flips <- rbinom(n=100, size=1, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnomr(10)
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(n=5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time
t1 <- Sys.time()
t1
class(41)
class(t1)
unclass(t1)
t2 <- POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
clasS(t2)
clasS(2)
class(2)
class(2)
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
sys.time() > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(dist ~ speed, cars)
plot(x=cars$dist, y=cars$speed)
?plot
plot(x=cars$dist, y=cars$speed, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="MyPlot")
plot(cars, main="My Plot")
plot(cars, main="My Plot")
plot(cars, main="My Plot", sub="My Plot Subtitle")
plot(cars,  sub="My Plot Subtitle")
?plot
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2_
plot(cars, pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data=mtcars)
hit(mtcars$mpg)
hist(mtcars$mpg)
q()
library(shiny); runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
library(ggplot2)
ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
shinyApp(ui, server)
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
ls
curwd()
currentwd
currentwd()
wscal <- rgdal::readOGR("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson")
setwd("~/learning/Programming/rprog")
wscal <- rgdal::readOGR("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson")
leaflet(wscal) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3)
View(wscal)
View(wscal)
View(wscal)
View(wscal)
View(wscal)
View(t2)
View(t2)
View(wscal)
View(wscal)
View(wscal)
wscal@data[["SABL_PWSID"]]
wscal <- rgdal::readOGR("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson")
leaflet(wscal) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3)
wscal <- rgdal::readOGR("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson")
leaflet(wscal) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3)
?"%>%"
leaflet(wscal) %>%
addTiles() %>%
addPolygons()
wscal <- rgdal::readOGR("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson")
library(dplyr)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
m <- leaflet() %>% setView(lng = -71.0589, lat = 42.3601, zoom = 12)
m <- leaflet() %>% addTiles()
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
m <- leaflet() %>% addTiles()
leaflet() %>%
addTiles() %>%
setView(lng = -98.583, lat = 39.833, zoom = 3) %>%
addGeoJSON(geojson)
leaflet() %>%
addTiles() %>%
setView(lng = -98.583, lat = 39.833, zoom = 3)
leaflet() %>%
addTiles() %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 4)
leaflet() %>%
addTiles() %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 5)
leaflet() %>%
addTiles() %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 8)
leaflet() %>%
addTiles() %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 7)
leaflet() %>%
addTiles() %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 10)
leaflet(wscal) %>%
addTiles() %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 10)
leaflet(wscal) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3, fillOpacity = 1) %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 10)
leaflet(wscal) %>%
addTiles() %>%
addPolygons(stroke = FALSE, smoothFactor = 0.3) %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 10)
leaflet(wscal) %>%
addTiles() %>%
addPolygons(stroke = TRUE, smoothFactor = 0.3) %>%
setView(lng = -119.417931, lat = 36.778259, zoom = 10)
?addTiles
?leaflet
View(wscal)
leaflet(wscal) %>%
addTiles() %>%
addPolygons(stroke = FALSE, fill = TRUE, smoothFactor = 0.3) %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10)
leaflet() %>%
addTiles() %>%
addPolygons(stroke = FALSE, fill = TRUE, smoothFactor = 0.3) %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(wscal)
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(wscal)
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(geojson)
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(geojson)
geojson <- readLines("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
wscal <- rgdal::readOGR("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson")
geojson <- readLines("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
source("~/learning/Programming/rprog/open_map_example.R")
# wscal <- rgdal::readOGR("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson")
geojson <- readLines("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson", warn = FALSE) %>%
paste(collapse = "\n")
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(geojson)
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
geojson <- readLines("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson", warn = FALSE) %>%
paste(collapse = "\n")
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
geojson <- readLines("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson", warn = FALSE) %>%
paste(collapse = "\n")
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(geojson)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
geojson <- readLines("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson", warn = FALSE) %>%
paste(collapse = "\n")
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(geojson)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
geojson <- readLines("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson", warn = FALSE)
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(geojson)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
geojson <- readLines("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson", warn = FALSE) %>%
paste(collapse = "\n") %>%
fromJSON(simplifyVector = FALSE)
geojson$style = list(
weight = 1,
color = "#555555",
opacity = 1,
fillOpacity = 0.8
)
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(geojson)
View(geojson)
View(geojson)
View(geojson)
View(geojson)
View(geojson)
