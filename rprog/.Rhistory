# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
View(my_data)
View(mad_libs)
View(mad_libs)
View(mad_libs)
View(mad_libs)
edit(mad_libs)
View(mad_libs)
View(mad_libs)
View(my_mean)
View(mad_libs)
View(mad_libs)
View(mad_libs)
View(my_mean)
View(mad_libs)
gc()
library("swirl")
swirl()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,19))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("woo", "woo")
submit()
mad_libs("dog", "fish", "wolf")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, mean)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(unique(flags))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
plants$Active_Growth_Period
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, replace=FALSE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(flips)
rbinom(1, size=100, prob=0.7)
flips <- rbinom(1, size=100, prob=0.7)
flips <- rbinom(100, size=100, prob=0.7)
flips <- rbinom(100, size=1, prob=0.7)
flips <- rbinom(n=100, size=1, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnomr(10)
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(n=5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time
t1 <- Sys.time()
t1
class(41)
class(t1)
unclass(t1)
t2 <- POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
clasS(t2)
clasS(2)
class(2)
class(2)
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
sys.time() > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(dist ~ speed, cars)
plot(x=cars$dist, y=cars$speed)
?plot
plot(x=cars$dist, y=cars$speed, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="MyPlot")
plot(cars, main="My Plot")
plot(cars, main="My Plot")
plot(cars, main="My Plot", sub="My Plot Subtitle")
plot(cars,  sub="My Plot Subtitle")
?plot
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2_
plot(cars, pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data=mtcars)
hit(mtcars$mpg)
hist(mtcars$mpg)
q()
library(shiny); runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
library(ggplot2)
ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
shinyApp(ui, server)
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
ls
curwd()
currentwd
currentwd()
wscal <- rgdal::readOGR("C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson")
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
# url <- "C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson"
url <- "C:/Users/jheaf/Dropbox/Water Data Challenge 2022/new_export_test.geojson"
res <- readOGR(dsn = url)
# geojson <- jsonLite::readLines(url) %>%
#   paste(collapse = "\n") %>%
#   fromJSON(simplifyVector = FALSE)
leaflet() %>%
addTiles() %>%
setView(lng = -117.3884190, lat = 34.1776714, zoom = 10) %>%
addGeoJSON(geojson = res)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
# url <- "C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson"
url <- "C:/Users/jheaf/Documents/Regulatory-Enforcement-Water-Data-Challenge-2022/new_export_test.geojson"
# res <- readOGR(dsn = url)
res <- readOGR(dsn=url, layer = "new_export_test")
# geojson <- jsonLite::readLines(url) %>%
#   paste(collapse = "\n") %>%
#   fromJSON(simplifyVector = FALSE)
leaflet(res) %>%
addTiles() %>%
addPolygons(color="orange") %>%
addPolylines( color="red") %>%
setView(lng = -118.243683, lat = 34.052235, zoom = 6)
# addGeoJSON(res)
addPolylines( color="black") %>%
library(shiny)
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
# url <- "C:/Users/jheaf/Dropbox/Water Data Challenge 2022/GIS/water_system_with_scores.geojson"
url <- "C:/Users/jheaf/Documents/Regulatory-Enforcement-Water-Data-Challenge-2022/new_export_test.geojson"
# res <- readOGR(dsn = url)
res <- readOGR(dsn=url, layer = "new_export_test")
# geojson <- jsonLite::readLines(url) %>%
#   paste(collapse = "\n") %>%
#   fromJSON(simplifyVector = FALSE)
leaflet(res) %>%
addTiles() %>%
addPolygons(color="orange") %>%
addPolylines( color="black") %>%
setView(lng = -118.243683, lat = 34.052235, zoom = 6)
# addGeoJSON(res)
library(shiny); runApp('Regulatory-Enforcement-Water-Data-Challenge-2022/rprog/open_map_example.R')
runApp('Regulatory-Enforcement-Water-Data-Challenge-2022/rprog/open_map_example.R')
runApp('Regulatory-Enforcement-Water-Data-Challenge-2022/rprog/open_map_example.R')
#
# quantileNum <- 10
#
# probs <- seq(0, 1, length.out = quantileNum + 1)
# bins <- quantile(res$red_int, probs, na.rm = TRUE, names = FALSE)
#
# while (length(unique(bins)) != length(bins)) {
#   quantileNum <- quantileNum - 1
#   probs <- seq(0, 1, length.out = quantileNum + 1)
#   bins <- quantile(res$red_int, probs, na.rm = TRUE, names = FALSE)
# }
# #
# # # pal <- colorBin("YlGn", bins = bins)
# #
# qpal <- colorQuantile("Blues", res$red_int, n = bins)
# #
# #
# # #
# ui <- dashboardPage(
#   dashboardHeader(
#     title="TEST"
#   ),
#   dashboardSidebar(
#     width = 350
#   ),
#   dashboardBody(
#
#     tabsetPanel(
#       type = "tabs",
#       id = "tab_selected",
#       tabPanel(
#         title = "Map",
#         leafletOutput("camap")
#
#       ),
#       tabPanel(
#         title = "Data"
#       ),
#       tabPanel(
#         title = "FAQ"
#
#       )
#
#     )
#   )
#
#
#
# )
# # #
# # # # Server
# #
# server <- function(input, output) {
#   popup <-
#   map <- leaflet(res) %>%
#       addTiles() %>%
#       addPolygons(
#         stroke = FALSE,
#         smoothFactor = 0.2,
#         fillOpacity = 1,
#         color = ~qpal(red_int),
#         popup = ~paste0(
#           "<b> Water System Number: <b>",
#           WATER_SYST,
#           "<br>",
#           "<b> Water System Name: <b>",
#           WATER_SY_1
#         )
#         ) %>%
#       addLegend("bottomright", pal = qpal, values = ~red_int,
#                 title = "Legend",
#                 opacity = 1
#       ) %>%
#       setView(lng = -119.417931, lat = 36.778259, zoom = 5)
#
#
#   output$camap <- renderLeaflet(map)
#
#
# }
#
#
# #
# # # Shiny App
# #
# shinyApp(ui, server)
# Libs
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
library(rgeos)
#
url <- "C:/Users/jheaf/Documents/Regulatory-Enforcement-Water-Data-Challenge-2022/new_export_test.geojson"
res <- readOGR(dsn = url, layer="new_export_test")
res <- res[res$red_int >= 0]
res <- readOGR(dsn = url, layer="new_export_test") %>% filter(red_int >= 0 & !NaN)
res <- readOGR(dsn = url, layer="new_export_test") %>% filter(red_int >= 0 & !is.nan(red_int))
# Libs
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
library(rgeos)
#
url <- "C:/Users/jheaf/Documents/Regulatory-Enforcement-Water-Data-Challenge-2022/new_export_test.geojson"
res <- readOGR(dsn = url, layer="new_export_test")
# Libs
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
library(rgeos)
#
url <- "C:/Users/jheaf/Documents/Regulatory-Enforcement-Water-Data-Challenge-2022/new_export_test.geojson"
res <- readOGR(dsn = url, layer="new_export_test")
res <- res[res$red_int >= 0 & !is.na(res$red_int)]
# Libs
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
library(rgeos)
#
url <- "C:/Users/jheaf/Documents/Regulatory-Enforcement-Water-Data-Challenge-2022/new_export_test.geojson"
res <- readOGR(dsn = url, layer="new_export_test")
res <- res[res$red_int >= 0]
# Libs
library(shiny)
library(shinydashboard)
library(shinyjs)
library(tidyverse)
library(leaflet)
library(rgdal)
library(magrittr) # needs to be run every time you start R and want to use %>%
library(dplyr)    # alternatively, this also loads %>%
library(jsonlite)
library(rgeos)
#
url <- "C:/Users/jheaf/Documents/Regulatory-Enforcement-Water-Data-Challenge-2022/new_export_test.geojson"
res <- readOGR(dsn = url, layer="new_export_test")
res <- res %>% drop_na("red_int")
drop_na(res$red_int)
View(res)
View(res)
library(shiny); runApp('Regulatory-Enforcement-Water-Data-Challenge-2022/rprog/open_map_example.R')
View(plants)
View(shape_mat)
View(t2)
View(unique_vals)
View(unique_vals)
install.packages("sp")
setwd("~/GitHub/Regulatory-Enforcement-Water-Data-Challenge-2022/rprog")
library(shiny); runApp('open_map_example.R')
runApp('open_map_example.R')
runApp('open_map_example.R')
runApp('open_map_example.R')
runApp('All_Course_Files/Complete_Files/04-Reactive_Shiny/05-Reactive_ObserveEvent.R')
runApp('open_map_example.R')
runApp('open_map_example.R')
runApp('open_map_example.R')
runApp('open_map_example.R')
runApp('open_map_example.R')
