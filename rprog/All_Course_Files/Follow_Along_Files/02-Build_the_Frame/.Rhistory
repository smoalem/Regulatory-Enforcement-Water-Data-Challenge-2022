seq(along.with= my_seq)
seq_along(my_seq)
rep(0, times=40)
rep(c(0,1,2), times=10)
rep(c(0,1,2), each=10)
| Logical vectors can contain the values TRUE, FALSE, and NA (for 'not available'). These values are generated as the
num_vect <- c(0.5, 55, -10, 6)
tf = numvect < 1
tf = num_vect < 1
tf <- num_vect < 1
tf
num_vect >= 6
my_char <- c("My", "name", "is")
my_char
paste(my_char, collapse=" ")
my_name = c(my_char, "Jae")
my_name
paste(my_name, collapse = " ")
paste("Hello", "world!", sep = " ")
paste(c("X", "Y", "Z"), sep="")
paste(1:3, c("X", "Y", "Z"), sep="")
LETTERS
paste(LETTERS, 1:4, sep="-")
c(44, NA, 5, NA)
x <- c(44, NA, 5, NA)
x * 3
y <- rnorm(1000)
z <- rep(NA, 1000
)
my_data <- sample(c(y, z), 100)
is.na(my_data)
my_na <- is.na(my_data)
my_na
my_data == na
my_data == NA
sum(my_na)
my_data
0/0
Inf/Inf
Inf - Inf
x
x[1:10]
x[is.na(x)]
x[!is.na(x)]
y <- x[!is.na(x)]
y
y[y > 0]
x[x > 0]
x[!is.na(x) & x > 0]
x[c(3,5,7)]
x[0]
x[3000]
x[c(-2, -10)]
x[-c(2,10)]
vect <- c(foo = 11, bar =2, norf=na)
vect <- c(foo = 11, bar =2, norf=NA)
vect
names(vect)
vect2 <- c(11,2, NA)
names(vect2) <- c("foo", "bar", "norf")
identical(vect, vect2)
vect["bar"]
vect[c("foo", "bar")]
my_vector <- 1:20
my_vector
dim(my_vector)
]
length(my_vector)
dim(my_vector) <- c(4,5)
dim(my_vector)
attributes(my_vector)
my_vector
class(my_vector)
my_matrix <- my_vector
?matrix
my_matrix2 <- matrix(1:20, nrow = 4, ncol =5)
identical(my_matrix, my_matrix2)
patientcs <- c("Bill", "Gina", "Kelly", "Sean")
patients <- c("Bill", "Gina", "Kelly", "Sean")
cbind(patients, my_matrix)
my_data <- data.frame(patients, my_matrix)
my_data
class(my_data)
cnames <- c("patient", "age", "weight", "bp", "rating", "test")
?colnames
colnames(my_data) <- cnames
my_data
TRUE == TRUE
(FALSE == TRUE) == FALSE
6 == 7
7 < 7
6 < 7
10 <= 10
5 != 7
!(5 == 7)
FALSE & FALSE
TRUE & c(TRUE,FALSE, FALSE)
TRUE && c(TRUE, FALSE, FALSE)
TRUE | c(TRUE, FALSE, FALSE)
TRUE || c(TRUE, FALSE, FALSE)
5 > 8 || 6 != 8 && 4 > 3.9
isTRUE(6 > 4)
identical('twins', 'twins')
xor(5==6, !FALSE)
ints <- sample(10)
ints
ints > 5
which(ints > 7)
any(ints < 0)
all(ints > 0)
Sys.Date()
mean(c(2,4,5))
x
submit()
Type('My first function!')
boring_function('My first function!')
boring_function
submit()
submit()
my_mean(c(4,5,10))
submit()
submit()
submit()
remainder <- function(num, divisor = 2) {
# Write your code here!
# Remember: the last expression evaluated will be returned!
num %% divisor
}
submit()
remainder(5)
remainder(11, 5)
remainder(divisor = 11, num = 5)
remainder(4, div = 2)
args(remainder)
submit()
submit()
evaluate(sum, c(1.4, 3.6, 7.9, 8.8))
evaluate(sd, c(1.4, 3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(funtion(x){x[1]}, c(8,4,0))
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[-1]}, c(8,4,0))
play()
evaluate(function(x){x[length(x)]}, c(8,4,0))
nxt()
?paste
paste("Programming", "is", "fun!")
submit()
submit()
submit()
submit()
telegram("ho", "ho", "ho")
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
submit()
View(mad_libs)
submit()
View(evaluate)
View(mad_libs)
submit()
madlibs("Newark", "dumbass", "Tesla")
mad_libs("Newark", "dumbass", "Tesla")
play()
mad_libs
mad_libs("dog","fish","wolf")
mad_libs("dog","fish","wolf")
source("C:/Users/jheaf/AppData/Local/Temp/Rtmp4wSOPV/mad_libs.R")
source("C:/Users/jheaf/AppData/Local/Temp/Rtmp4wSOPV/mad_libs.R")
mad_libs("dog","fish","wolf")
mad_libs("dog","fish","wolf")
mad_libs("dog","fish","wolf")
mad_libs("dog","fish","wolf")
mad_libs("dog","fish","wolf")
mad_libs
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
mad_libs("dog","fish","wolf")
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
mad_libs("dog","fish","wolf")
View(mad_libs)
View(mad_libs)
mad_libs("dog","fish","wolf")
mad_libs("Newark", "dumbass", "Tesla")
source("~/swirl_inst.R")
mad_libs("Newark", "dumbass", "Tesla")
getpwd
getpwd()
getwd()
nxt()
play(())
play()
mad_libs()
mad_libs("Newark", "dumbass", "Tesla")
View(mad_libs)
View(mad_libs)
View(mad_libs)
mad_libs("Newark", "dumbass", "Tesla")
mad_libs("Newark", "dumbass", "Tesla")
mad_libs("Newark", "dumbass", "Tesla")
mad_libs
mad_libs("Newark", "dumbass", "Tesla")
mad_libs("Newark", "dumbass", "Tesla")
View(mad_libs)
View(mad_libs)
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
function(...){
# Do your argument unpacking here!
# Don't modify any code below this comment.
# Notice the variables you'll need to create in order for the code below to
# be functional!
args <- list(...)
place <- args[["place"]]
adjective <- args["adjective"]
noun <- args[["noun"]]
paste("News from", place, "today where", adjective, "students took to the streets in protest of the new", noun, "being installed on campus.")
}
View(my_data)
View(mad_libs)
View(mad_libs)
View(mad_libs)
View(mad_libs)
edit(mad_libs)
View(mad_libs)
View(mad_libs)
View(my_mean)
View(mad_libs)
View(mad_libs)
View(mad_libs)
View(my_mean)
View(mad_libs)
gc()
library("swirl")
swirl()
mean(c(2,4,5))
submit()
boring_function("My first function!")
boring_function
submit()
my_mean(c(4,5,19))
my_mean(c(4,5,10))
submit()
remainder(5)
remainder(11,5)
remainder(divisor=11, num=5)
remainder(4, div = 2)
args(remainder)
submit
submit()
evaluate(sd, c(1.4,3.6, 7.9, 8.8))
evaluate(function(x){x+1}, 6)
evaluate(function(x){x[1]}, c(8,4,0))
evaluate(function(x){x[length(x)]}, c(8,4,0))
?paste
paste("Programming", "is", "fun!")
submit()
telegram("woo", "woo")
submit()
mad_libs("dog", "fish", "wolf")
submit()
"I" %p% "love" %p% "R!"
head(flags)
dim(flags)
class(flags)
cls_list <-lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
?sapply
sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags[, 19:23]
lapply(flag_shapes, mean)
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(unique(flags))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
sapply(unique_vals, length)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass)
tapply(flags$population, flags$landmass, summary)
ls()
class(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants, 10)
tail(plants, 15)
summary(plants)
plants$Active_Growth_Period
table(plants$Active_Growth_Period)
str()
str(plants)
?sample
sample(1:6, 4, replace = TRUE)
sample(1:6, 4, replace = TRUE)
sample(1:20, replace=FALSE)
sample(1:20, 10, replace=FALSE)
sample(1:20, 10)
LETTERS
sample(LETTERS)
flips <- sample(c(0, 1), 100, replace = TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(flips)
rbinom(1, size=100, prob=0.7)
flips <- rbinom(1, size=100, prob=0.7)
flips <- rbinom(100, size=100, prob=0.7)
flips <- rbinom(100, size=1, prob=0.7)
flips <- rbinom(n=100, size=1, prob=0.7)
flips2 <- rbinom(n=100, size=1, prob=0.7)
flips2
sum(flips2)
?rnorm
rnomr(10)
rnorm(10)
rnorm(10, mean=100, sd=25)
?rpois
rpois(n=5, 10)
replicate(100, rpois(5, 10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
cm <- colMeans(my_pois)
hist(cm)
d1 <- Sys.Date()
class(d1)
unclass(d1)
d1
d2 <- as.Date("1969-01-01")
unclass(d2)
Sys.time()
t1 <- Sys.time
t1 <- Sys.time()
t1
class(41)
class(t1)
unclass(t1)
t2 <- POSIXlt(Sys.time())
t2 <- as.POSIXlt(Sys.time())
clasS(t2)
clasS(2)
class(2)
class(2)
class(t2)
t2
unclass(t2)
str(unclass(t2))
t2$min
weekdays()
weekdays(d1)
months(d1)
months(t1)
quarters(t2)
t3 <- "October 17, 1986 08:24"
t4 <- strptime(t3, "%B %d, %Y %H:%M")
t4
class(t4)
sys.time() > t1
Sys.time() > t1
Sys.time() - t1
difftime(Sys.time(), t1, units='days')
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x=cars$speed, y=cars$dist)
plot(dist ~ speed, cars)
plot(x=cars$dist, y=cars$speed)
?plot
plot(x=cars$dist, y=cars$speed, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(x=cars$speed, y=cars$dist, xlab="Speed", ylab="Stopping Distance")
plot(cars, main="MyPlot")
plot(cars, main="My Plot")
plot(cars, main="My Plot")
plot(cars, main="My Plot", sub="My Plot Subtitle")
plot(cars,  sub="My Plot Subtitle")
?plot
plot(cars, col=2)
plot(cars, xlim=c(10,15))
plot(cars, pch=2_
plot(cars, pch=2)
load(mtcars)
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data=mtcars)
hit(mtcars$mpg)
hist(mtcars$mpg)
q()
library(shiny); runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
library(ggplot2)
ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
# ggplot( data = data.frame(x=1:10, y=(1:10) **5))
shinyApp(ui, server)
runApp('learning/Programming/rprog/All_Course_Files/Follow_Along_Files/01-Intro_to_Shiny/02-Shinylayout.R')
ls
curwd()
currentwd
currentwd()
curwd()
getwd()
source("~/swirl_inst.R")
source("~/swirl_inst.R")
chwd("~/learning/Programming/rprog/All_Course_Files")
setwd("~/learning/Programming/rprog/All_Course_Files")
getwd()
setwd("~/learning/Programming/rprog/All_Course_Files/Follow_Along_Files/02-Build_the_Frame")
dot <- readRDS( file = "../02-Build__the_Frame/app-data/subresion_agg.rds")
dot <- readRDS( file = "../02-Build_the_Frame/app-data/subresion_agg.rds")
dot <- readRDS( file = "../02-Build_the_Frame/app-data/subregion_agg.rds")
View(dot)
dot %>%
filter( country_name == "Canada" & date >= "2020-01-01" & date <= "2020-12-31")
dot %>%
filter( country_name == "Canada" & date >= "2020-01-01" & date <= "2020-12-31") %>%
dot %>%
filter( country_name == "Canada" & date >= "2020-01-01" & date <= "2020-12-31") %>%
View(dot)
View(dot)
dot %>%
filter( country_name == "Canada" & date >= "2020-01-01" & date <= "2020-12-31")
library(magrittr)
library(dplyr)
install.packages("dplyr")
detach("package:dplyr", unload = TRUE)
# select() %>%
# select() %>%
# filter() %>%
# select() %>%
# filter() %>%
# arrange() %>%
# select() %>%
# filter() %>%
# arrange() %>%
# select() %>%
# filter() %>%
# arrange() %>%
